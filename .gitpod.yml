image: ocaml/opam:ubuntu-ocaml-5.1
tasks:
  - name: Setup Compiler Environment
    init: |
      echo "--- Setting up OPAM environment (should be fast) ---"
      # Initialize opam. It will detect the pre-installed OCaml 5.1 compiler from the Docker image.
      # The '--disable-sandboxing' flag is often needed in containerized environments.
      opam init -y --disable-sandboxing --auto-setup

      # --- CRITICAL: Source the OPAM environment to add dune and other tools to PATH ---
      eval "$(opam env)"

      echo "--- Installing OCaml Dependencies ---"
      # Install dune and yojson for the current opam switch.
      opam install dune yojson -y

      echo "--- Starting Project Build ---"
      echo "Building Rust lexer..."
      cd obvcc-lexer # Navigate to the lexer repo
      cargo build --release # Build the lexer in release mode for performance
      cd ../obvcc-toolchain # Navigate back to the parser repo

      echo "Building OCaml compiler..."
      dune build # Build the OCaml compiler

      echo "Environment setup complete!"
      echo "You can now run a demo by typing: dune exec -- ./bin/main.exe test.json"
      echo "Or generate a test.json first: ../obv_lexer/target/release/obv_lexer test.c > test.json"
    command: |
      # This command runs after `init`. It can be used to open a file or run a demo.
      # Create a simple test.c file for immediate testing.
      echo 'int main(void) { return 1879; }' > test.c
      # Run the lexer to produce test.json for the demo.
      ../obvcc-lexer/target/release/obvcc-lexer test.c > test.json
      # Run the OCaml compiler on the generated JSON.
      dune exec -- ./bin/main.exe test.json
